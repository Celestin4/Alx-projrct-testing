#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <errno.h>

#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGS 64

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *args[MAX_ARGS];
    char *path = getenv("PATH");
    
    while (1) {
        printf("$ ");
        
        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
            // end of file reached
            exit(0);
        }
        
        // remove newline character from input
        command[strcspn(command, "\n")] = '\0';
        
        int arg_count = 0;
        char *token = strtok(path, ":"); // directly tokenize the original path variable
        while (token != NULL && arg_count < MAX_ARGS - 1) {
            char path_command[MAX_COMMAND_LENGTH];
            snprintf(path_command, MAX_COMMAND_LENGTH, "%s/%s", token, command);
            if (access(path_command, X_OK) == 0) {
                args[arg_count] = path_command;
                arg_count++;
            }
            token = strtok(NULL, ":");
        }
        args[arg_count] = NULL;
        
        if (arg_count == 0) {
            // command not found in any of the directories in the PATH
            printf("Command not found\n");
            continue;
        }
        
        if (fork() == 0) {
            // child process
            execvp(args[0], args);
            perror("Error");
            exit(errno);
        } else {
            // parent process
            wait(NULL);
        }
    }
    
    return 0;
}
